<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
     http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.1.xsd"
	default-autowire="byName">

	<bean id="filterChainDefinitionMapBuilder" class="com.std.manage.integration.shiro.StdFilterChainDefinitionMapBuilder" />
	<bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder" factory-method="buildFilterChainDefinitionMap" />

	<!-- 安全认证过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean" autowire="no" >
		<property name="securityManager" ref="securityManager" />
		<property name="unauthorizedUrl" value="/previlige/no" />
		<property name="loginUrl" value="/manage/login" />
		<property name="successUrl" value="/manage/index" />
		<property name="filters">
			<map>
				<entry key="perms" value-ref="stdPermissionsAuthorizationFilter" />
			</map>
		</property>
		<property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>
	</bean>

	<!-- 定义Shiro安全管理配置 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager" autowire="no" >
		<property name="sessionManager" ref="sessionManager" />
		<property name="cacheManager" ref="cacheManager" />
        <!-- 记住密码管理 -->
        <property name="rememberMeManager" ref="rememberMeManager" />
		<property name="realm" ref="stdShiroRealm" />
	</bean>
     <!-- 记住密码Cookie -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">  
        <!-- cookie的名字 -->
        <constructor-arg name="name" value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <!-- 7天,单位秒 -->
        <property name="maxAge" value="#{7 * 24 * 60 * 60}"/>
    </bean>
    <!-- rememberMe管理器,cipherKey生成见{@code Base64Test.java} -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager" autowire="no" >
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('${academic.cookie.remember.ckey}')}"/>
        <property name="cookie" ref="rememberMeCookie"/>  
    </bean>

	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的StdShiroRealm.java -->
	<bean id="stdShiroRealm" class="com.std.manage.integration.shiro.StdShiroRealm" />

	<!-- 自定义会话管理配置 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- session的失效时长，单位毫秒 1小时: 3600000 -->
		<!-- 设置全局会话超时时间，默认30分钟，即如果30分钟内没有访问会话将过期 1800000 -->
		<property name="globalSessionTimeout" value="${server.servlet.session.timeout}" />
		<!-- 删除失效的session -->
		<property name="deleteInvalidSessions" value="true" />
		<!-- 是否开启会话验证器，默认是开启的 -->
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<!-- Shiro提供了会话验证调度器，用于定期的验证会话是否已过期，如果过期将停止会话； 出于性能考虑，一般情况下都是获取会话时来验证会话是否过期并停止会话的； 
			但是如在web环境中，如果用户不主动退出是不知道会话是否过期的，因此需要定期的检测会话是否过期， Shiro提供了会话验证调度器SessionValidationScheduler来做这件事情。 -->
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<!-- Shiro提供SessionDAO用于会话的CRUD -->
		<property name="sessionDAO" ref="sessionDAO" />
		<!-- 是否启用/禁用Session Id Cookie，默认是启用的； 如果禁用后将不会设置Session Id Cookie，即默认使用了Servlet容器的JSESSIONID， 
			且通过URL重写（URL中的“;JSESSIONID=id”部分）保存Session Id。 -->
		<property name="sessionIdCookieEnabled" value="true" />
		<property name="sessionIdCookie" ref="sessionIdCookie" />

	</bean>

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <!-- 设置调度时间间隔，单位毫秒，默认就是1小时 -->
        <property name="interval" value="${server.servlet.session.sessionTimeoutClean}"/>
        <!-- 设置会话验证调度器进行会话验证时的会话管理器 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

	<!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID, 
		当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg name="name" value="${academic.manage.shiro.sessionid.cookie.key}" />
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
		<property name="path" value="/"/>
	</bean>

    <bean id="sessionDAO" class="com.std.manage.integration.shiro.StdRedisSessionDAO">
        <!-- 设置Session缓存名字，默认就是shiro-activeSessionCache，要和ehcache.xml中的那么对应 -->
        <property name="activeSessionsCacheName" value="${academic.shiro.active.sessions.cache.name}"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
        <property name="defaultExp" value="#{${server.servlet.session.timeout} / 1000}"/>
    </bean>

	<bean id="sessionIdGenerator" class="com.std.manage.integration.shiro.StdSessionIdGenerator" />

	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"> 
		<property name="cacheManager" ref="ehCacheManager"/>
	</bean>
	<bean id="ehCacheManager" class ="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="${academic.shiro.location.ehcache.xml}" />
		<property name="shared" value="true" />
	</bean>
	
    <!-- 在方法中 注入  securityManager ，进行代理控制 -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- AOP式方法级权限检查 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<!-- 可以再方法中直接使用 RequiresPermissions.class, RequiresRoles.class, RequiresUser.class, 
		RequiresGuest.class, RequiresAuthentication.class 这几个注解来使用 -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<bean id="stdPermissionsAuthorizationFilter" class="com.std.manage.integration.shiro.StdPermissionsAuthorizationFilter" />
</beans>
